'''
**什么是变量**？
       变就是变化的意思，量就是记录事物的状态，记录衡量等等，或者说记录下来人的身高体重等等。这就是变量的含义。
**为什么需要变量？**
      一定是变量能够和人一样提供了服务，人有记录事物特征的一个功能，比如一个人的身高，一个人的体重，或者一个人的名字，这个就是变量。 变量也就是为了让计算机能够像人一样能够把事物记录下来。
怎么使用？
    变量是先定义后引用
'''
# name = 'yanzan'    #   变量名 = 变量值
# print(name)   #  引用

# age = 15
# print(age)

'''
内存管理垃圾回收机制，例如name = 延瓒 这个不叫垃圾。 垃圾就是当一个值，内存计数为0的时候，没有任何变量与这个值关联的时候，这个就是垃圾。
详细一些：也就是说，垃圾就是当一个变量值被绑定的变量名个数（内存计数）为0，这辈子都调用不了的时候，就称为垃圾。

引用计数增加：
引用计数减少：
'''
# 引用计数增加：
x = 10
y = x
z = x
'''此时10的变量值引用计数就是3 也就是有3次渠道可以调用到10这个值，这就是引用计数的增加。'''

# 引用计数减少：
del x  # 接触变量名x与10的一种绑定关系，del并不是删除，而是一种接触关联的绑定关系。 （10的引用计数将变为2了）
del y  # 此时10的引用计数变为·了1
# print(z)
z = 12345  # 此时z和原来10的关系解除了，绑定了新的内存地址12345，但问题出现了，当初的那个10 身上的引用计数变成了0，那么就成了一个垃圾。这辈子无法调用了
'''python自动会在内存寻找变量值有没有引用计数，如果发现一个变量值没有引用计数的话，就会自动清除。'''
print(z)

# 在python解释器中有一些波浪的乱码，这是python自带的pep8的一种代码规范，所以不会影响代码的正常运行/ 重新格式化代码

# 变量
'''
一个变量有三大组成部分：
    1、变量名
    2、等号 =  赋值符号
    3、变量值
        其中变量名是指向等号右侧值的内存地址，用来访问右侧的值，变量名很关键。
        赋值符号是将变量值的内存地址绑定给变量名
        变量值用来真正记录在内存中事物的状态
    
    变量名需要了解的重点：
        1、变量名是取内存中事物的变量值的所以要将变量名的名字起的要有意义（遵循的一个原则要见名之意）清晰易懂例如：name age level等等。
        2、变量名通过字母、数字、下划线为原则，变量名不能以数字开头，纯数字的也不行，不能用python内置的名称来命名变量名。例如print、if、for等等。
        3、ps：不要用拼音、也不要用中文，在简明之意的情况下尽可能的短。
        4、变量名的命名风格：
            4.1、纯小写+下划线的命名方式：age_of_alex = 13
            4.2、驼峰体方式「每个的首字母变成大写」：AgeOfALex = 13
        ！！！在python中关于变量名的命名推荐使用纯小写+下划线的方式
    
    变量值需要了解的重点：
        1、id：反映的是变量值的内存地址计算出来的id号码，id就是根据内存地址计算出来的一种id号码。变量值的内存地址不通，ID则不同
            name = 'age'   print(id(name)) 表示了age的id号
        2、类型：字符串、列表、字典、整数、浮点数等等。 变量值就是记录事物的，但是事物有很多的东西，所以通过不通的类型存放不同的事物。不通类型的值用来表示记录不同的状态。
            
        3、value（值本身）：
'''
# name = 'yanzan'
# print(id(name))  #  140227867374192
# print(type(name)) # 查看变量的类型，也就是值的一个类型：<class 'str'>

'''
is 与 == 的区别
1、is是比较左右两个值的身份是否相等，说白了，就是id号是否相等
2、==  两个等号是比较左右两个值，他们的值是否相等。
3、值相等的情况下id可能不同，在两块不同的内存空间里可以存放相同的值。

>>> age = 1902091
>>> age2 = 1902091
>>> age is age2
False
>>> age == age2
True
>>> 
'''

# 特殊情况：(打破上面的理论)
'''
>>> a = 10
>>> b = 10
>>> print(id(a), id(b))
4337978288 4337978288
>>> a is b
True
>>> 

这就是python的一个概念叫做小整数池的概念，python解释器在启动的一瞬间就会在内存中申请好一系列内存空间，存放好常用的整数。
理论上来说a=10 创造了一个空间，b=10 也创造了一个内存空间，但是python为了优化，同样的值，从现存创建好的内存空间直接绑定给a或者b了，其实此时的a和b都没有创造内存空间
只是赋值了python内置的内存空间了。python的小整数池只把一些常用的整数 -5----256这些范围的数做了整数池优化。

重点：这个也适用于字符串，比如 name = aaa name2 = aaa  python同样也把aaa做了优化

在来一个重点：在pycharm当中扩大了这种小整数池的一个范围，这个和python解释器没有关系，这个和pycharm有关系，pycharm做了处理，pycharm这款软件启动的时候开辟了一个大
整数池，为了效率更好的提升。 但是研究pycharm并没有太大的意义。

这就是python的小整数池的概念，这个概念并不是只包含整数，还有字符串，可能还有其他的东西，小整数池只是一个抽象的概念。
'''

'''
变量中常量的概念：
    变量就是变化的量，常量就是不变的量，但是在python当中没有常量的概念，但是在程序的开发过程当中会涉及到一些常量的概念。
    反正常量就是这个变量的值就这辈子就不变了，不经常改变的变量，这么理解，就是一个理解而已
    在python中把变量名全部写成大写的这种约定俗称代表常量，这只是一种规范。 如果要改，也能改，只是一个约定俗称。
'''

